generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  firstName         String
  lastName          String
  userName          String
  password          String
  OwnerMessages     Chat?               @relation("user1")
  RequestMessages   Chat?               @relation("user2")
  Lessee            Lessee?
  Message           Message[]
  Owner             Owner?
  Question          Question[]
  QuestionVotes     QuestionVotes[]
  ReplyVotes        ReplyVotes[]
  VerificationTable VerificationTable[]
}

model Owner {
  rating             Float                @default(0.00)
  totalRatingCount   Int                  @default(0)
  id                 Int                  @id @default(autoincrement())
  userId             Int                  @unique
  status             String               @default("Inactive")
  User               User                 @relation(fields: [userId], references: [id])
  Item               Item[]
  LesseeReview       LesseeReview[]
  PaypalOwner        PaypalOwner[]
  ProductOwnerReview ProductOwnerReview[]
  StripeOwner        StripeOwner[]
  Transactions       Transaction[]
}

model Lessee {
  rating             Float
  totalRatingCount   Int
  id                 Int                  @id @default(autoincrement())
  userId             Int
  User               User                 @relation(fields: [userId], references: [id])
  Cart               Cart[]
  ItemReview         ItemReview[]
  LesseeReview       LesseeReview[]
  PaypalLessee       PaypalLessee[]
  ProductOwnerReview ProductOwnerReview[]
  StripeLessee       StripeLessee[]
}

model Item {
  id               Int           @id @default(autoincrement())
  itemName         String
  price            Float
  itemRating       Float
  totalRatingCount Int
  description      String
  updatedAt        DateTime?     @updatedAt
  createdAt        DateTime?     @default(now())
  ownerId          Int
  Owner            Owner         @relation(fields: [ownerId], references: [id])
  Categories       Category[]    @relation("ItemCategories")
  ItemReview       ItemReview[]
  Question         Question[]
  Transactions     Transaction?
}

model Category {
  id               Int        @id @default(autoincrement())
  category         String
  subCategory      Category[] @relation("SubToParent")
  parentCategory   Category?  @relation("SubToParent", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?
  Items            Item[]     @relation("ItemCategories")

}

model Question {
  id            Int             @id @default(autoincrement())
  itemId        Int
  userId        Int
  question      String
  likes         Int
  dislikes      Int
  Item          Item            @relation(fields: [itemId], references: [id])
  User          User            @relation(fields: [userId], references: [id])
  QuestionVotes QuestionVotes[]
  Reply         Reply[]
}

model Reply {
  id         Int          @id @default(autoincrement())
  questionId Int
  likes      Int
  dislikes   Int
  Reply      String
  Question   Question     @relation(fields: [questionId], references: [id])
  ReplyVotes ReplyVotes[]
}

model QuestionVotes {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  vote       Int
  Question   Question @relation(fields: [questionId], references: [id])
  User       User     @relation(fields: [userId], references: [id])
}

model ReplyVotes {
  id      Int   @id @default(autoincrement())
  userId  Int
  replyId Int
  vote    Int
  Reply   Reply @relation(fields: [replyId], references: [id])
  User    User  @relation(fields: [userId], references: [id])
}

model ItemReview {
  id        Int      @id @default(autoincrement())
  rating    Float
  comment   String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  itemId    Int
  lesseeId  Int
  Item      Item     @relation(fields: [itemId], references: [id])
  Lessee    Lessee   @relation(fields: [lesseeId], references: [id])
}

model Transaction {
  id        Int               @id @default(autoincrement())
  startDate String
  endDate   String
  status    TransactionStatus
  updatedAt DateTime          @updatedAt
  createdAt DateTime          @default(now())
  ownerId   Int
  itemId    Int               @unique
  salePrice Float
  cartId    Int
  Cart      Cart              @relation(fields: [cartId], references: [id])
  Item      Item              @relation(fields: [itemId], references: [id])
  Owner     Owner             @relation(fields: [ownerId], references: [id])
}

model Cart {
  id            Int           @id @default(autoincrement())
  lesseeId      Int
  paymentMethod String
  totalPrice    Float
  status        CartStatus
  lessee        Lessee        @relation(fields: [lesseeId], references: [id])
  Transaction   Transaction[]
  @@unique(fields:[lesseeId, status],name:"activecart")
}

model VerificationTable {
  id                 Int                @id @default(autoincrement())
  verified           VerificationStatus
  updatedAt          DateTime           @updatedAt
  verificationDataId Int
  userId             Int
  User               User               @relation(fields: [userId], references: [id])
  VerificationData   VerificationData   @relation(fields: [verificationDataId], references: [id])
}

model VerificationData {
  id                Int                 @id @default(autoincrement())
  userIdImageUrl    String
  VerificationTable VerificationTable[]
}

model ProductOwnerReview {
  id             Int      @id @default(autoincrement())
  rating         Float
  comment        String
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  lesseeId       Int
  productOwnerId Int
  Lessee         Lessee   @relation(fields: [lesseeId], references: [id])
  ProductOwner   Owner    @relation(fields: [productOwnerId], references: [id])
}

model LesseeReview {
  id             Int      @id @default(autoincrement())
  rating         Float
  comment        String
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  lesseeId       Int
  productOwnerId Int
  Lessee         Lessee   @relation(fields: [lesseeId], references: [id])
  ProductOwner   Owner    @relation(fields: [productOwnerId], references: [id])
}

model Paypal {
  id           Int            @id @default(autoincrement())
  paypalToken  String
  PaypalLessee PaypalLessee[]
  PaypalOwner  PaypalOwner[]
}

model PaypalOwner {
  id       Int                @id @default(autoincrement())
  verified VerificationStatus
  paypalId Int
  ownerId  Int
  Owner    Owner              @relation(fields: [ownerId], references: [id])
  Paypal   Paypal             @relation(fields: [paypalId], references: [id])
}

model PaypalLessee {
  id       Int                @id @default(autoincrement())
  verified VerificationStatus
  paypalId Int
  lesseeId Int
  Lessee   Lessee             @relation(fields: [lesseeId], references: [id])
  Paypal   Paypal             @relation(fields: [paypalId], references: [id])
}

model Stripe {
  id           Int            @id @default(autoincrement())
  stripeToken  String
  StripeLessee StripeLessee[]
  StripeOwner  StripeOwner[]
}

model StripeOwner {
  id       Int                @id @default(autoincrement())
  verified VerificationStatus
  stripeId Int
  ownerId  Int
  Owner    Owner              @relation(fields: [ownerId], references: [id])
  Stripe   Stripe             @relation(fields: [stripeId], references: [id])
}

model StripeLessee {
  id       Int                @id @default(autoincrement())
  verified VerificationStatus
  stripeId Int
  lesseeId Int
  Lessee   Lessee             @relation(fields: [lesseeId], references: [id])
  Stripe   Stripe             @relation(fields: [stripeId], references: [id])
}

model Message {
  id      Int    @id @default(autoincrement())
  message String
  chatId  Int
  userId  Int
  Chat    Chat   @relation(fields: [chatId], references: [id])
  User    User   @relation(fields: [userId], references: [id])
}

model Chat {
  id           Int       @id @default(autoincrement())
  user1Id      Int       @unique
  user2Id      Int       @unique
  messageCount Int
  User1        User      @relation("user1", fields: [user1Id], references: [id])
  User2        User      @relation("user2", fields: [user2Id], references: [id])
  Message      Message[]
}

enum VerificationStatus {
  PENDING
  VERIFIED
  UNVERIFIED
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  COMPLETED
}

enum CartStatus {
  ACTIVE
  COMPLETED
}
